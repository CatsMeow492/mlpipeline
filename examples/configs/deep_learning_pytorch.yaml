# Deep Learning Pipeline Configuration with PyTorch
# This example demonstrates a neural network pipeline using PyTorch for image classification

pipeline:
  name: "pytorch_image_classification"
  description: "Deep learning image classification using PyTorch and transfer learning"
  tags: ["deep-learning", "pytorch", "image-classification", "transfer-learning"]
  mlflow_tracking_uri: "file:./mlruns"

data:
  sources:
    - type: "image_folder"
      path: "data/images"
      image_size: [224, 224]
      channels: 3
  
  preprocessing:
    - type: "image_augmentation"
      parameters:
        rotation_range: 20
        width_shift_range: 0.2
        height_shift_range: 0.2
        horizontal_flip: true
        zoom_range: 0.2
        brightness_range: [0.8, 1.2]
    - type: "normalization"
      parameters:
        mean: [0.485, 0.456, 0.406]  # ImageNet means
        std: [0.229, 0.224, 0.225]   # ImageNet stds
  
  train_split: 0.7
  validation_split: 0.15
  test_split: 0.15
  stratify: true
  random_state: 42

model:
  type: "pytorch"
  parameters:
    architecture: "resnet50"
    pretrained: true
    num_classes: 10
    freeze_backbone: false
    dropout: 0.5
    learning_rate: 0.001
    batch_size: 32
    epochs: 50
    optimizer: "adam"
    scheduler: "cosine_annealing"
    weight_decay: 1e-4
    device: "auto"  # Use GPU if available
  
  hyperparameter_tuning:
    method: "optuna"
    n_trials: 30
    parameters:
      learning_rate: [0.0001, 0.001, 0.01]
      batch_size: [16, 32, 64]
      dropout: [0.3, 0.5, 0.7]
      weight_decay: [1e-5, 1e-4, 1e-3]
      optimizer: ["adam", "sgd", "adamw"]
    cv_folds: 3
    scoring: "accuracy"
  
  early_stopping: true
  early_stopping_patience: 10

evaluation:
  metrics: ["accuracy", "precision", "recall", "f1_score", "top_5_accuracy"]
  cross_validation: false  # Not typical for deep learning
  generate_plots: true
  plot_types: ["confusion_matrix", "training_curves", "class_activation_maps"]

drift_detection:
  enabled: true
  baseline_data: "data/baseline_images"
  methods: ["evidently"]
  thresholds:
    data_drift: 0.15
    prediction_drift: 0.1
  monitoring_window: 1000
  alert_channels: ["email:ml-team@company.com"]

few_shot:
  enabled: false

logging:
  level: "INFO"
  file_path: "logs/pytorch_pipeline.log"
  max_file_size: "100MB"
  backup_count: 5

# GPU and distributed training settings
distributed:
  enabled: false
  backend: "nccl"
  world_size: 1
  rank: 0

# Model checkpointing
checkpointing:
  enabled: true
  save_best_only: true
  monitor: "val_accuracy"
  mode: "max"
  save_frequency: 5