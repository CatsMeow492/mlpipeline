# Wine Quality Regression Demo
# Demonstrates: Regression, feature scaling, cross-validation, regression metrics

pipeline:
  name: "wine_quality_regression_demo"
  description: "Predict wine quality score using physicochemical properties"
  tags: ["demo", "regression", "wine", "quality-prediction"]
  mlflow_tracking_uri: "http://localhost:5000"

data:
  sources:
    - type: csv
      path: "demos/data/wine_quality_red.csv"
  
  preprocessing:
    # Standardize all numerical features (all features are numerical in this dataset)
    - type: standard_scaler
      columns: ["fixed acidity", "volatile acidity", "citric acid", "residual sugar",
                "chlorides", "free sulfur dioxide", "total sulfur dioxide", "density",
                "pH", "sulphates", "alcohol"]
    
    # Handle any potential missing values
    - type: missing_value_imputer
      columns: ["fixed acidity", "volatile acidity", "citric acid", "residual sugar",
                "chlorides", "free sulfur dioxide", "total sulfur dioxide", "density",
                "pH", "sulphates", "alcohol"]
      parameters:
        strategy: "median"
  
  train_split: 0.7
  validation_split: 0.15
  test_split: 0.15
  stratify: false  # No stratification for regression
  random_state: 42

model:
  type: sklearn
  parameters:
    algorithm: RandomForestRegressor
    n_estimators: 200
    max_depth: 15
    min_samples_split: 5
    min_samples_leaf: 2
    random_state: 42
    n_jobs: -1  # Use all available cores
  
  hyperparameter_tuning:
    method: optuna
    n_trials: 40
    timeout: 1200  # 20 minutes
    parameters:
      n_estimators: [100, 200, 300, 500]
      max_depth: [10, 15, 20, 25]
      min_samples_split: [2, 5, 10]
      min_samples_leaf: [1, 2, 4]
      max_features: ["sqrt", "log2", 0.8]
    cv_folds: 5
    scoring: "neg_mean_squared_error"  # Good metric for regression
  
  early_stopping: false

evaluation:
  metrics: ["mse", "mae", "rmse", "r2_score", "mape"]
  cross_validation: true
  cv_folds: 5
  stratify: false
  generate_plots: true
  plot_types: ["residuals", "prediction_vs_actual", "feature_importance"]

drift_detection:
  enabled: true
  baseline_data: "demos/data/wine_quality_red.csv"
  methods: ["evidently"]
  thresholds:
    data_drift: 0.1
    prediction_drift: 0.05
  monitoring_window: 300
  alert_channels:
    - "email:wine-ml-team@winery.com"

few_shot:
  enabled: false

logging:
  level: "INFO"
  file_path: "demos/results/wine_quality_demo.log"
  max_file_size: "50MB"
  backup_count: 3 